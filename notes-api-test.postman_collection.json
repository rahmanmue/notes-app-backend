{
	"info": {
		"_postman_id": "07677b49-3631-460c-b66d-7688cf1cbc34",
		"name": "Notes API Test",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30374198"
	},
	"item": [
		{
			"name": "Adding Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response Content-Type header should have application/json value\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", ()=> {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"status\");",
							"    pm.expect(responseJson.status).to.equals(\"success\");",
							"",
							"    pm.expect(responseJson).to.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil ditambahkan');",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"data\");",
							"    pm.expect(responseJson.data).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body data should have noteId property and not equal to empty\", ()=> {",
							"",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty(\"noteId\");",
							"    pm.expect(data.noteId).to.not.equals('');",
							"",
							"    pm.environment.set(\"noteId\", data.noteId);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Belajar Backend\",\n    \"tags\": [\"Javascript\", \"AWS\"],\n    \"body\": \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Getting All Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response Content-Type header should have application/json value\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", ()=> {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"status\");",
							"    pm.expect(responseJson.status).to.equals(\"success\");",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"data\");",
							"    pm.expect(responseJson.data).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body data should have a notes array and contain at least 1 item\", ()=> {",
							"",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty(\"notes\");",
							"    pm.expect(data.notes).to.be.an(\"array\");",
							"",
							"    pm.expect(data.notes).lengthOf.at.least(1);",
							"   ",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get Specified Notes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response Content-Type header should have application/json value\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", ()=> {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"status\");",
							"    pm.expect(responseJson.status).to.equals(\"success\");",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"data\");",
							"    pm.expect(responseJson.data).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body data should contain note object\", ()=> {",
							"",
							"    const responseJson = pm.response.json();",
							"    const { data } = responseJson;",
							"",
							"    pm.expect(data).to.ownProperty(\"note\");",
							"    pm.expect(data.note).to.be.an(\"object\");",
							"",
							"})",
							"",
							"pm.test(\"note object should contain correct value for id, title, body, and tags property\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    const { data: { note } } = responseJson;",
							"",
							"    const expectedId = pm.environment.get('noteId');",
							"    const expectedTitle = \"Belajar Backend\";",
							"    const expectedTags = [ \"Javascript\",\"AWS\"];",
							"    const expectedBody = \"Lorem Ipsum is simply dummy text of the printing and typesetting industry. Lorem Ipsum has been the industry's standard dummy text ever since the 1500s, when an unknown printer took a galley of type and scrambled it to make a type specimen book. It has survived not only five centuries, but also the leap into electronic typesetting, remaining essentially unchanged. It was popularised in the 1960s with the release of Letraset sheets containing Lorem Ipsum passages, and more recently with desktop publishing software like Aldus PageMaker including versions of Lorem Ipsum.\";",
							"",
							"    pm.expect(note).to.have.ownProperty('id');",
							"    pm.expect(note.id).to.equals(expectedId);",
							"   ",
							"    pm.expect(note).to.have.ownProperty('title');",
							"    pm.expect(note.title).to.equals(expectedTitle);",
							"    ",
							"    pm.expect(note).to.have.ownProperty('tags');",
							"    pm.expect(note.tags).to.eql(expectedTags);",
							"   ",
							"    pm.expect(note).to.have.ownProperty('body');",
							"    pm.expect(note.body).to.equals(expectedBody);",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response Content-Type header should have application/json value\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", ()=> {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"status\");",
							"    pm.expect(responseJson.status).to.equals(\"success\");",
							"",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil diperbarui');",
							"})",
							"",
							"pm.test(\"when request the updated note\", ()=> {",
							"    const noteId = pm.environment.get(\"noteId\");",
							"",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response)=> {",
							"        if(!error) {",
							"            pm.test('then the updated note should contain the latest data', () => {",
							"                const responseJson = response.json();",
							"                const { data: { note } } = responseJson;",
							"",
							"                const expectedTitle = 'Catatan A Revised';",
							"                const expectedTags = ['Android', 'Web'];",
							"                const expectedBody = 'Isi dari Catatan A Revised';",
							"",
							"                pm.expect(note.title).to.equals(expectedTitle);",
							"                pm.expect(note.tags).to.eql(expectedTags);",
							"                pm.expect(note.body).to.equals(expectedBody);",
							"            });",
							"        }",
							"    })",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"title\": \"Catatan A Revised\",\n    \"tags\": [\"Android\", \"Web\"],\n    \"body\": \"Isi dari Catatan A Revised\"\n\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete Note",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"response status code should have 200 value\", () => {",
							"    pm.response.to.have.status(200)",
							"})",
							"",
							"pm.test(\"response Content-Type header should have application/json value\", ()=> {",
							"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.equals(\"application/json; charset=utf-8\")",
							"})",
							"",
							"pm.test(\"response body should be an object\", ()=> {",
							"    const responseJson = pm.response.json();",
							"    pm.expect(responseJson).to.be.an(\"object\")",
							"})",
							"",
							"pm.test(\"response body should have the correct property and value\", ()=> {",
							"    const responseJson = pm.response.json();",
							"",
							"    pm.expect(responseJson).to.ownProperty(\"status\");",
							"    pm.expect(responseJson.status).to.equals(\"success\");",
							"",
							"    pm.expect(responseJson).to.have.ownProperty('message');",
							"    pm.expect(responseJson.message).to.equals('Catatan berhasil dihapus');",
							"})",
							"",
							"pm.test(\"when request the deleted note\", ()=> {",
							"    const noteId = pm.environment.get(\"noteId\");",
							"",
							"    pm.sendRequest(`http://localhost:5000/notes/${noteId}`, (error, response)=> {",
							"        if(!error) {",
							"            pm.environment.set(\"noteIdDel\", \"\")",
							"            pm.test('the deleted note should be not found', () => {",
							"                pm.expect(response.code).to.equals(404);",
							"",
							"                const responseJson = response.json();",
							"",
							"                pm.expect(responseJson.status).to.equals('fail');",
							"                pm.expect(responseJson.message).to.equals('Catatan tidak ditemukan');",
							"",
							"            });",
							"        }",
							"    })",
							"})",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/notes/{{noteId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"notes",
						"{{noteId}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}